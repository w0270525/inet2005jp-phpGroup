 Thurday
 merge and push




 TUESDAY

 Got alot of the display views working, same with the a fiew edit views
 content area edit view still need to be made
 added some extra boot strap to hide uned form elements as well as a rest button on top that refreshes the admin options

 Still need to add remove options for the items (prob just a button link from the current items editing form)
 *** ** Still need to use all these models to generate a page from the controllers ** ***  the page generated is till the orriginal connecting directly to the dbase.
 Need to add/finish all the forms verification as to spec
 individual page styles is back in this is  p_style in the Pages table, Had to put it back in as It was half way integrated and it
 was easier then  taking it completly out.  The default value is null and we do not have to actully use it in the assignment,
 just be aware its there incase you get any errors.










Some of the dwl statemnet are retrung more information then they need, try not to change this unless neccesay, It could work to our advantage






THURSDAY PM

Login in is finished, we can keep testing it as we continue but it seems to be fully functional. I added a bootstrap
bar to the admin view so we can see who is logged in.
The login process now uses session variables to persist the login. You can access the current user through the main control on
any view that is loaded through the index.The main controller is a stored as a session variable  so query results should also peresit when the
pages change. Access the login page with '/admin' after the site address.
When a proper logout occurs all session variables are destroyed, controller reset, and the session file is deleted from the system

if you rebuilt the database with the script or used the updated insert portion,  all login pass are "admin" user names should be admin, editor, and user

Users  currently only can have have one role as getRoleId()returns an int, this will probably have to be changed to an array but I
will try to find a workaround;




Thursday MORNING

LOGIN is almost functional
to access the login type localhost:port/admin to add the login veiw to the index page
updates scripts so new creation script has datetime value for all creation dates. Allow made some new
users for testing useres. all passwords are "admin"\
users are "admin", "editor", and "author"



SAT - 4:00PM
AARON ALI
I added some controllers and models for each of the classes. If you set
the project to run and point it at the development folder you should be ale to see
some unfinished html tables returning the values from the CMS data base for each of the major CMS tables.
Getting a page from all this information should'nt be to hard now.


DUE MONDAY
REQ-008   Display of Generated Website (6 pts.)
Users navigating to the front-end site in a web browser will be presented with a website,
dynamically created from the pages, content areas, articles, and currently active CSS template
defined in the CMS database. A menu with appropriate hyperlinks will be added to every page allowing
 for complete navigation of the site. If multiple articles are currently defined in the database for
  a particular content area on a particular page, newer articles will show up first/on top in that area.
All users will be able to display the basic site without having to log in.
NOTE: IN ORDER TO TEST THIS REQUIREMENT DURING THE CODE REVIEW AT LEAST FOUR PAGES, EACH
WITH AT LEAST FOUR CONTENT AREAS, EACH WITH AT LEAST ONE ARTICLE (i.e. AN ARTICLE IN ALL
CONTENT AREAS ON ALL PAGES) WILL NEED TO ALREADY BE CREATED WITH SUFFICIENT TEXT TO LOOK
PRESENTABLE. LOREM IPSUM TEXT FROM A SITE SUCH AS http://www.lipsum.com/ IS ACCEPTABLE.
YOU WILL ALSO NEED TWO CSS TEMPLATES PREDEFINED WITH DIFFEREING STYLES SO WE CAN TEST
 SWITCHING BACK AND FORTH BETWEEN THE TWO.


REQ-0020 Entity Relationship Diagram for Custom CMS Database (5 pts.)
An Entity Relationship Diagram (ERD) document will be created for the MySQL database to support
the custom CMS web application. The document will use Crowâ€™s Feet Notation. All entities and
relationships will be reflected in the document. All relevant fields, data types, and keys will be
appropriately indicated.

REQ-0021 MySQL Workbench Data Model (5 pts.)
The Entity Relationship Diagram (ERD) document described in RE-0020 above should be implemented
 as a MySQL Workbench Data Model. The model should be added to Source Control (see REQ-0022) and
 sample data should be included in this model. With sample data included, you will generate a sample
 database to use for development.
